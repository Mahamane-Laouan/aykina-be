<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Http\Request; use Symfony\Component\HttpFoundation\Response; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Http; use Illuminate\Support\Facades\File; class VerifyTokenMiddleware { public function handle(Request $B5nua, Closure $B0JnE) : Response { goto jAokr; W0JqK: return $B0JnE($B5nua); goto cnS5n; jAokr: $MXXsn = [base64_decode('dmFsaWRhdGU='), base64_decode('YXBpL3ZhbGlkYXRlUHVyY2hhc2U='), '/', base64_decode('Lw=='), base64_decode('Y2hlY2stZGlyZWN0b3JpZXM=')]; goto Y1SVV; v6K9P: XFQEn: goto u7j6i; gwxNd: $sr5BC = $this->verifyToken(); goto bCuZP; bCuZP: if ($sr5BC) { goto XFQEn; } goto YwfWn; Y1SVV: if (!$B5nua->is($MXXsn)) { goto T9kS8; } goto W0JqK; cnS5n: T9kS8: goto gwxNd; u7j6i: return $B0JnE($B5nua); goto gLv5f; YwfWn: return redirect('/'); goto v6K9P; gLv5f: } private function getMacAddress() { return exec('getmac'); } private function getServerIP() { return request()->ip(); } private function verifyToken() { try { goto kuv1S; jjHlU: $RpaUx = base64_decode("aHR0cHM6Ly92YWxpZGF0b3Iud2hveGFjaGF0LmNvbS92ZXJpZnlfbmV3"); goto x11EC; rxQD5: Log::info('Verification API Response:', $jy1gx); goto soh36; kuv1S: $k9B4F = storage_path('app/validatedToken.txt'); goto sBQYm; d2GZS: return false; goto KJOqj; bb7oy: return true; goto Um2Em; nLqZD: $jy1gx = $BFswd->json(); goto rxQD5; uLx5S: Log::error("Token file not found: " . $k9B4F); goto d2GZS; KJOqj: IBjWZ: goto ffamF; eeqGA: s74Al: goto bb7oy; soh36: if (!(!isset($jy1gx['success']) || !$jy1gx['success'])) { goto s74Al; } goto k0wu3; k0wu3: Log::error("Token verification failed. Removing current directory..."); goto YtOnC; sBQYm: if (File::exists($k9B4F)) { goto IBjWZ; } goto uLx5S; YtOnC: return false; goto eeqGA; ffamF: $rVGig = File::get($k9B4F); goto jjHlU; x11EC: $BFswd = Http::post($RpaUx, ["server_ip" => $this->getServerIP(), "mac_address" => $this->getMacAddress(), "token" => trim($rVGig)]); goto nLqZD; Um2Em: } catch (\Exception $k1hfy) { Log::error('Verification Error:', ['exception' => $k1hfy->getMessage()]); return false; } } }